blueprint:
  name: Auto klimatyzacja lato/zima.
  description:  "`- Version: 2.0 -`\n\n"

  domain: automation
  input:

    climate:
      name: Entities climate
      description: 'Select climate entities to be used.'
      selector:
        entity:
          domain: climate

    season:
      name: Select season
      description: 'Select the season of use.'
      default: Lato
      selector:
        select:
          mode: dropdown
          options:
            - Lato
            - Zima

    set_temperature_climate:
      name: Set temperature climate
      default: 25
      description: 'Select the temperature to be set at climate.'
      selector:
        number:
          min: 15
          max: 30
          unit_of_measurement: °C
          mode: slider
          step: 1

    hvac_modes:
      name: Hvac modes
      description: 'Select the mode to be set to the air conditioner.'
      default: dry
      selector:
        select:
          mode: dropdown
          options:
            - heat
            - cool
            - dry
            - fan_only

    fan_modes:
      name: Fan modes
      description: 'Select the ventilation speed to be set at the air conditioner.'
      default: auto
      selector:
        select:
          mode: dropdown
          options:
            - auto
            - high
            - low
            - mid

    target_temperature_start:
      name: Target temperature start
      default: 25
      description: 'Set the startup target temperature.'
      selector:
        number:
          min: 15
          max: 30
          unit_of_measurement: °C
          mode: slider
          step: 1

    target_temperature_stop:
      name: Target temperature stop
      default: 21
      description: 'Set the target temperature for shutdown.'
      selector:
        number:
          min: 15
          max: 30
          unit_of_measurement: °C
          mode: slider
          step: 1

    delay_temperature_stop:
      default: 10
      name: Delay temperature stop
      description: 'Set the climate shutdown delay since the target temperature has been reached.'
      selector:
        number:
          min: 0
          max: 30
          unit_of_measurement: min
          mode: slider
          step: 1

    start_time:
      name: Start time
      default: "00:00:00"
      description: 'Set automatic operation start time.'
      selector:
        time: 

    stop_time:
      name: Stop time
      default: "00:00:00"
      description: 'Set automatic operation end time.'
      selector:
        time: 

    notify_device:
      name: Device to notify push
      default: false
      description: 'Device needs to run the official Home Assistant app to receive notifications.'
      selector:
        device: 
          integration: mobile_app

mode: parallel
variables:
  season: !input season
  target_temperature_start: !input target_temperature_start
  climate: !input climate
  target_temperature_stop: !input target_temperature_stop

trigger:
- platform: numeric_state
  entity_id: !input climate
  attribute: current_temperature
  above: !input target_temperature_start
  id: climate_on
- platform: numeric_state 
  entity_id: !input climate
  attribute: current_temperature 
  below: !input target_temperature_start
  id: climate_on
- platform: numeric_state
  entity_id: !input climate
  attribute: current_temperature 
  below: !input target_temperature_stop
  for: 
    minutes: !input delay_temperature_stop
  id: climate_off
- platform: numeric_state
  entity_id: !input climate
  attribute: current_temperature 
  above: !input target_temperature_stop
  for: 
    minutes: !input delay_temperature_stop
  id: climate_off
- platform: time
  at: !input stop_time
  id: climate_off
- platform: time
  at: !input start_time
  id: climate_on

action:
- alias: Turn on air conditioner
  if:
    - "{{is_state(climate,'off')}}"
    - condition: time
      after: !input start_time
      before: !input stop_time
    - or: 
      - "{{ season == 'Zima' and (state_attr(climate,'current_temperature')|float(0) < target_temperature_start|float(0) )}}"
      - "{{ season == 'Lato' and (state_attr(climate,'current_temperature')|float(0) > target_temperature_start|float(0) )}}"
  then:
    - service: climate.set_temperature
      data:
        entity_id: !input climate
        temperature: !input set_temperature_climate
        hvac_mode: !input hvac_modes
    - delay: 
        seconds: 1
    - service: climate.set_fan_mode
      data:
        entity_id: !input climate
        fan_mode: !input fan_modes
    - domain: mobile_app
      type: notify
      device_id: !input notify_device
      title: "KLIMATYZACJA"
      message: "Automatyczne włącznie klimatyzacji przy temperaturze: {{state_attr(climate,'current_temperature')|float(0)}}°"
- alias: Turn off air conditioner
  if: 
    - "{{not is_state(climate,'off')}}"
    - or: 
      - "{{ trigger.id == 'climate_off' and season == 'Zima' and (state_attr(climate,'current_temperature')|float(0) > target_temperature_stop|float(0) )}}"
      - "{{ trigger.id == 'climate_off' and season == 'Lato' and (state_attr(climate,'current_temperature')|float(0) < target_temperature_stop|float(0) )}}"
      - "{{ trigger.id == 'climate_off' and trigger.platform == 'time'}}"
  then:
      - service: climate.turn_off
        target:
          entity_id: !input climate
      - domain: mobile_app
        type: notify
        device_id: !input notify_device
        title: "KLIMATYZACJA"
        message: "{% if trigger.id == 'climate_off' %} Automatyczne wyłączenie klimatyzacji{% endif %}"
          
